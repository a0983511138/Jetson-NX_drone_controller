#include <iostream>
#include <pthread.h>
#include "PCA9685.h"
#include <unistd.h>
#include <stdlib.h>

#define bus 1
#define address 0x40
#define frequency 400
#define min_pulse 1600
#define max_pulse 3000
#define motor_acc 1
#define motor_num 1

using namespace std;

int findMax(int* buf, int size);
void stop();
void* keyPress(void* arg);
void* moving(void* arg);

PCA9685 motor = PCA9685(bus, address);   //PCA9685 create

int main(){
    void *state = (void*)malloc(sizeof(char) * 5);
    
    motor.setPWMFreq(frequency);        //set frequency
    sleep(1);

    pthread_t t1, t2;  //create pthread
    pthread_create(&t1, NULL, keyPress, NULL);

    while(*(char*)state != 's'){
        pthread_join(t1, &state);
        printf("%d\t%d\n", atoi((char*)state), 's');
        //pthread_create(&t2, NULL, moving, state);
        //printf("state: %d; s: %d", state, 's');
    }

    //pthread_cancel(t2);
    pthread_cancel(t1);

    stop();

    return 0;
}

int findMax(int* buf, int size){
    int i, max = buf[0];

    for(i = 0; i < size; i++){
        max = max > buf[i] ? buf[i] : max;
    }
    cout << "max : " << max << endl;

    return max;
}

void stop(){
    int pwm[motor_num], i;

    for(i = 0; i < motor_num; i++){
        pwm[i] = motor.getPWM(i+1);
    }

    while(findMax(pwm, motor_num) > min_pulse){
        for(i = 0; i < motor_num; i++){
            if(pwm[i] > min_pulse){
                pwm[i] -= motor_acc;
                if((pwm[i]) < min_pulse)
                    pwm[i] = min_pulse;
                motor.setPWM(i+1, pwm[i]);
            }
            else
                pwm[i] = 1;
            cout << "motor" << i+1 << " : " << pwm[i] << "  ";
            sleep(0.3);
        }
    }
}

void* keyPress(void* arg){
    char buf[5];

    cout << "set pwm(" << min_pulse << " ~ " << max_pulse << ") : ";
    cin >> buf;
    printf("%s", buf);

    return (void*)buf;
}

void* moving(void* arg){         //set motor PWM smoothly
    int pwm[motor_num], i;
    int *target = (int*)arg;

    for(i = 0; i < motor_num; i++){
        pwm[i] = motor.getPWM(i+1);
    }

    while(pwm != target){
        for(i = 0; i <motor_num; i++){
            if(abs(pwm[i] - target[i]) < motor_acc)
                pwm[i] = target[i];
            if(pwm[i] > target[i]){
                pwm[i] -= motor_acc;
            }
            else if(pwm[i] < target[i]){
                pwm[i] += motor_acc;
            }
            //motor.setPWM(i, pwm[i]);
            printf("%d:%d\t", target[i], pwm[i]);
        }
        printf("\n");
    }
}

